import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../../../models/ride.dart';
import '../../../models/booking.dart';
import '../../../services/booking_service.dart';
import '../../../services/notification_service.dart';
import 'package:firebase_database/firebase_database.dart';
import 'dart:async';
import '../../../services/chat_service.dart';
import '../chat/chat_room_screen.dart';
import '../../../services/ride_service.dart';
import '../../../services/websocket_service.dart';

class RideDetailScreen extends StatefulWidget {
  final dynamic ride;

  const RideDetailScreen({Key? key, required this.ride}) : super(key: key);

  @override
  State<RideDetailScreen> createState() => _RideDetailScreenState();
}

class _RideDetailScreenState extends State<RideDetailScreen> {
  final BookingService _bookingService = BookingService();
  final NotificationService _notificationService = NotificationService();
  final RideService _rideService = RideService();
  final ChatService _chatService = ChatService();
  final WebSocketService _webSocketService = WebSocketService();
  bool _isBooking = false;
  bool _isBooked = false;
  Booking? _booking;
  int _selectedSeats = 1;
  StreamSubscription<DatabaseEvent>? _bookingStatusSubscription;
  int _availableSeats = 0;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _availableSeats = widget.ride.availableSeats;
    _selectedSeats = 1; // M·∫∑c ƒë·ªãnh ch·ªçn 1 gh·∫ø
    
    // Thi·∫øt l·∫≠p l·∫Øng nghe tin nh·∫Øn chat qua WebSocket
    _setupChatMessageListener();
    
    // G·ªçi l·∫•y d·ªØ li·ªáu booking khi kh·ªüi t·∫°o m√†n h√¨nh
    _loadBookingData();
  }
  
  // Ph∆∞∆°ng th·ª©c thi·∫øt l·∫≠p l·∫Øng nghe tin nh·∫Øn WebSocket
  void _setupChatMessageListener() {
    // ƒêƒÉng k√Ω callback ƒë·ªÉ nh·∫≠n tin nh·∫Øn chat m·ªõi
    _webSocketService.onChatMessageReceived = (chatMessage) {
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang trong ph√≤ng chat kh√¥ng
      // N·∫øu kh√¥ng, hi·ªÉn th·ªã th√¥ng b√°o tin nh·∫Øn m·ªõi
      final Ride rideData = widget.ride as Ride;
      final String driverEmail = rideData.driverEmail ?? '';
      
      if ((chatMessage.senderEmail == driverEmail || chatMessage.receiverEmail == driverEmail) && mounted) {
        print('üì© Nh·∫≠n tin nh·∫Øn m·ªõi t·ª´ t√†i x·∫ø: ${chatMessage.content}');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o tr√™n m√†n h√¨nh
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Tin nh·∫Øn m·ªõi t·ª´ ${rideData.driverName}: ${chatMessage.content}'),
            action: SnackBarAction(
              label: 'Xem',
              onPressed: () async {
                // M·ªü m√†n h√¨nh chat
                final roomId = await _chatService.createOrGetChatRoom(driverEmail);
                if (roomId != null && context.mounted) {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => ChatRoomScreen(
                        roomId: roomId,
                        partnerName: rideData.driverName,
                        partnerEmail: driverEmail,
                      ),
                    ),
                  );
                }
              },
            ),
          ),
        );
      }
    };
  }

  // Method m·ªõi ƒë·ªÉ t·∫£i d·ªØ li·ªáu booking
  Future<void> _loadBookingData() async {
    print('üîÑ ƒêang t·∫£i d·ªØ li·ªáu booking cho chuy·∫øn ƒëi...');
    await _checkExistingBooking();
  }

  @override
  void dispose() {
    // H·ªßy ƒëƒÉng k√Ω callback khi widget b·ªã h·ªßy
    _webSocketService.onChatMessageReceived = null;
    _bookingStatusSubscription?.cancel();
    super.dispose();
  }

  String _formatTime(String timeString) {
    try {
      // Parse the date string in ISO format
      final dateTime = DateTime.parse(timeString);
      // Format to display date and time
      return DateFormat('HH:mm dd/MM/yyyy').format(dateTime);
    } catch (e) {
      return timeString;
    }
  }

  Widget _buildStatusIndicator(String status) {
    Color color;
    String label;

    switch (status.toUpperCase()) {
      case 'ACTIVE':
        color = Colors.green;
        label = 'ƒêang m·ªü';
        break;
      case 'CANCELLED':
        color = Colors.red;
        label = 'ƒê√£ h·ªßy';
        break;
      case 'COMPLETED':
        color = Colors.blue;
        label = 'Ho√†n th√†nh';
        break;
      case 'PENDING':
        color = Colors.orange;
        label = 'Ch·ªù x√°c nh·∫≠n';
        break;
      default:
        color = Colors.grey;
        label = status;
    }

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: color.withOpacity(0.2),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Text(
        label,
        style: TextStyle(
          color: color,
          fontSize: 14,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t ch·ªó chuy·∫øn ƒëi n√†y ch∆∞a
  Future<void> _checkExistingBooking() async {
    if (!mounted) return;
    
    setState(() {
      _isLoading = true;
    });

    try {
      print('üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra booking hi·ªán c√≥...');
      
      // L·∫•y danh s√°ch booking c·ªßa ng∆∞·ªùi d√πng
      final bookings = await _bookingService.getPassengerBookings();
      print('üîç L·∫•y ƒë∆∞·ª£c ${bookings.length} bookings c·ªßa ng∆∞·ªùi d√πng');
      
      // T√¨m booking cho chuy·∫øn ƒëi hi·ªán t·∫°i
      final Ride rideData = widget.ride as Ride;
      final int rideId = rideData.id;
      print('üîç ƒêang ki·ªÉm tra chuy·∫øn ƒëi #$rideId');
      
      // In ra danh s√°ch t·∫•t c·∫£ rideId t·ª´ bookings
      final allRideIds = bookings.map((b) => b.rideId).toList();
      print('üìã Danh s√°ch rideId t·ª´ t·∫•t c·∫£ bookings: $allRideIds');
      
      // Ch·ªâ l·∫•y booking ƒëang ho·∫°t ƒë·ªông (kh√¥ng b·ªã h·ªßy ho·∫∑c t·ª´ ch·ªëi)
      final activeBookings = bookings.where((booking) => 
          booking.rideId == rideId && 
          booking.status.toUpperCase() != 'CANCELLED' && 
          booking.status.toUpperCase() != 'REJECTED'
      ).toList();
      
      if (activeBookings.isNotEmpty) {
        // N·∫øu ƒë√£ t·ªìn t·∫°i booking ƒëang ho·∫°t ƒë·ªông cho chuy·∫øn ƒëi n√†y
        final booking = activeBookings.first;
        print('‚úÖ ƒê√£ t√¨m th·∫•y booking ƒëang ho·∫°t ƒë·ªông cho chuy·∫øn ƒëi #$rideId: ${booking.id} - tr·∫°ng th√°i: ${booking.status}');
        
        if (!mounted) return;
        setState(() {
          _isBooked = true;
          _booking = booking;
          
          // Set up real-time listener for this booking
          _setupBookingStatusListener(_booking!.id);
        });
      } else {
        // Ki·ªÉm tra booking g·∫ßn ƒë√¢y nh·∫•t trong b·ªô nh·ªõ local
        final lastCreatedBooking = _bookingService.getLastCreatedBooking();
        if (lastCreatedBooking != null && 
            lastCreatedBooking.rideId == rideId && 
            lastCreatedBooking.status.toUpperCase() != 'CANCELLED' && 
            lastCreatedBooking.status.toUpperCase() != 'REJECTED') {
          
          print('‚úÖ T√¨m th·∫•y booking local cho chuy·∫øn ƒëi #$rideId: ${lastCreatedBooking.id} - tr·∫°ng th√°i: ${lastCreatedBooking.status}');
          
          if (!mounted) return;
          setState(() {
            _isBooked = true;
            _booking = lastCreatedBooking;
            
            // Set up real-time listener for this booking
            _setupBookingStatusListener(_booking!.id);
          });
        } else {
          print('‚ÑπÔ∏è Kh√¥ng c√≥ booking ƒëang ho·∫°t ƒë·ªông n√†o cho chuy·∫øn ƒëi #$rideId');
          if (!mounted) return;
          setState(() {
            // ƒê·∫£m b·∫£o r·∫±ng _isBooked ƒë∆∞·ª£c ƒë·∫∑t th√†nh false n·∫øu kh√¥ng t√¨m th·∫•y booking
            _isBooked = false;
            _booking = null;
          });
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi ki·ªÉm tra booking hi·ªán c√≥: $e');
      if (!mounted) return;
      setState(() {
        _isBooked = false;
        _booking = null;
      });
    } finally {
      if (!mounted) return;
      setState(() {
        _isLoading = false;
      });
    }
  }

  // Set up real-time listener for booking status
  void _setupBookingStatusListener(int bookingId) {
    // Cancel any existing subscription first
    _bookingStatusSubscription?.cancel();
    
    final DatabaseReference bookingRef = FirebaseDatabase.instance.ref(
      'bookings/$bookingId',
    );

    print('üîÑ Thi·∫øt l·∫≠p Firebase listener cho booking #$bookingId');
    
    // First check if booking already exists in Firebase
    bookingRef.get().then((snapshot) {
      if (snapshot.exists) {
        print('‚úÖ Booking #$bookingId ƒë√£ t·ªìn t·∫°i tr√™n Firebase');
        
        try {
          // Update local data if needed
          final data = Map<String, dynamic>.from(snapshot.value as Map);
          final firebaseBooking = Booking.fromJson(data);
          print('üì° D·ªØ li·ªáu Firebase hi·ªán t·∫°i: ${firebaseBooking.status}');
          
          // Update local state if Firebase has more recent status
          if (_booking?.status != firebaseBooking.status) {
            print('‚ÑπÔ∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i local t·ª´ Firebase: ${_booking?.status} -> ${firebaseBooking.status}');
            setState(() {
              _booking = firebaseBooking;
            });
          }
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi ƒë·ªçc d·ªØ li·ªáu booking t·ª´ Firebase: $e');
        }
      } else {
        print('‚ÑπÔ∏è Booking #$bookingId ch∆∞a t·ªìn t·∫°i tr√™n Firebase, ƒëang t·∫°o m·ªõi...');
        // Save current booking data to Firebase
        bookingRef.set(_booking!.toJson()).then((_) {
          print('‚úÖ ƒê√£ l∆∞u th√¥ng tin booking #$bookingId l√™n Firebase');
        }).catchError((error) {
          print('‚ùå L·ªói khi l∆∞u booking l√™n Firebase: $error');
        });
      }
    }).catchError((error) {
      print('‚ùå L·ªói khi ki·ªÉm tra booking tr√™n Firebase: $error');
    });
    
    // Set up listener for real-time updates
    _bookingStatusSubscription = bookingRef.onValue.listen((event) {
      if (event.snapshot.value != null) {
        try {
          final data = Map<String, dynamic>.from(event.snapshot.value as Map);
          final updatedBooking = Booking.fromJson(data);
          print('üì° Nh·∫≠n ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ Firebase cho booking #$bookingId - tr·∫°ng th√°i: ${updatedBooking.status}');

          setState(() {
            _booking = updatedBooking;
          });

          // Show notification if status changed to APPROVED
          if (updatedBooking.status.toUpperCase() == 'APPROVED') {
            _showDriverAcceptedDialog(updatedBooking);
          }
        } catch (e) {
          print('‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu booking t·ª´ Firebase: $e');
        }
      } else {
        print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu booking #$bookingId tr√™n Firebase');
      }
    }, onError: (error) {
      print('‚ùå L·ªói khi l·∫Øng nghe c·∫≠p nh·∫≠t t·ª´ Firebase: $error');
    });
  }

  // Show notification when driver accepts booking
  void _showDriverAcceptedDialog(Booking booking) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder:
          (context) => AlertDialog(
            title: const Text('T√†i x·∫ø ƒë√£ ch·∫•p nh·∫≠n'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'T√†i x·∫ø ƒë√£ ch·∫•p nh·∫≠n ƒë∆°n ƒë·∫∑t chuy·∫øn c·ªßa b·∫°n!',
                  style: TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 16),
                _buildDetailItem('M√£ ƒë·∫∑t ch·ªó:', '#${booking.id}'),
                _buildDetailItem('S·ªë gh·∫ø:', '${booking.seatsBooked}'),
                _buildDetailItem('Tr·∫°ng th√°i:', 'ƒê√£ ch·∫•p nh·∫≠n'),
                _buildDetailItem(
                  'Th·ªùi gian c·∫≠p nh·∫≠t:',
                  _formatTime(DateTime.now().toIso8601String()),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('ƒê√≥ng'),
              ),
            ],
          ),
    );
  }

  Future<void> _showBookingSuccessDialog(Booking booking) async {
    // Thay v√¨ showDialog, d√πng await showDialog ƒë·ªÉ ƒë·ª£i cho ƒë·∫øn khi dialog ƒë√≥ng
    return showDialog(
      context: context,
      barrierDismissible: false,
      builder:
          (context) => AlertDialog(
            title: const Text('ƒê·∫∑t chuy·∫øn th√†nh c√¥ng'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'ƒê·∫∑t chuy·∫øn th√†nh c√¥ng, ƒëang ch·ªù t√†i x·∫ø duy·ªát.',
                  style: TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 16),
                _buildDetailItem('M√£ ƒë·∫∑t ch·ªó:', '#${booking.id}'),
                _buildDetailItem('S·ªë gh·∫ø:', '${booking.seatsBooked}'),
                _buildDetailItem('Tr·∫°ng th√°i:', 'Ch·ªù t√†i x·∫ø duy·ªát'),
                _buildDetailItem(
                  'Th·ªùi gian ƒë·∫∑t:',
                  _formatTime(booking.createdAt),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('ƒê√≥ng'),
              ),
            ],
          ),
    );
  }

  Widget _buildDetailItem(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Row(
        children: [
          Text(
            label,
            style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 14),
          ),
          const SizedBox(width: 8),
          Text(value, style: const TextStyle(fontSize: 14)),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final currencyFormat = NumberFormat.currency(locale: 'vi_VN', symbol: '‚Ç´');
    final Ride rideData = widget.ride as Ride;

    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: const Text('Chi ti·∫øt chuy·∫øn ƒëi'),
        backgroundColor: const Color(0xFF00AEEF),
        elevation: 0,
      ),
      backgroundColor: Colors.white,
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Blue header section with basic ride info
            Container(
              color: const Color(0xFF00AEEF),
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Route info
                  Row(
                    children: [
                      const Icon(
                        Icons.circle_outlined,
                        color: Colors.white,
                        size: 20,
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          rideData.departure,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                  // Connecting line
                  Padding(
                    padding: const EdgeInsets.only(left: 10),
                    child: Container(height: 30, width: 2, color: Colors.white),
                  ),
                  // Destination
                  Row(
                    children: [
                      const Icon(
                        Icons.location_on,
                        color: Colors.white,
                        size: 20,
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          rideData.destination,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  // Time and status
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'Th·ªùi gian kh·ªüi h√†nh',
                            style: TextStyle(
                              color: Colors.white70,
                              fontSize: 14,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            _formatTime(rideData.startTime),
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                      _buildStatusIndicator(rideData.status),
                    ],
                  ),
                ],
              ),
            ),

            // Details section
            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Driver info
                  const Text(
                    'Th√¥ng tin t√†i x·∫ø',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 12),
                  ListTile(
                    contentPadding: EdgeInsets.zero,
                    leading: CircleAvatar(
                      backgroundColor: Colors.blue.shade100,
                      child: const Icon(Icons.person, color: Color(0xFF00AEEF)),
                    ),
                    title: Text(
                      rideData.driverName,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
                    subtitle: Text(rideData.driverEmail),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: const Icon(
                            Icons.message,
                            color: Color(0xFF00AEEF),
                          ),
                          onPressed: () async {
                            try {
                              // L·∫•y ho·∫∑c t·∫°o ph√≤ng chat v·ªõi t√†i x·∫ø
                              final roomId = await _chatService
                                  .createOrGetChatRoom(rideData.driverEmail);

                              if (roomId != null && context.mounted) {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder:
                                        (context) => ChatRoomScreen(
                                          roomId: roomId,
                                          partnerName: rideData.driverName,
                                          partnerEmail: rideData.driverEmail,
                                        ),
                                  ),
                                );
                              } else {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text(
                                      'Kh√¥ng th·ªÉ t·∫°o ph√≤ng chat, vui l√≤ng th·ª≠ l·∫°i sau',
                                    ),
                                  ),
                                );
                              }
                            } catch (e) {
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(content: Text('L·ªói: $e')),
                              );
                            }
                          },
                        ),
                        IconButton(
                          icon: const Icon(
                            Icons.phone,
                            color: Color(0xFF00AEEF),
                          ),
                          onPressed: () {
                            // Implement call driver
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text('T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn'),
                              ),
                            );
                          },
                        ),
                      ],
                    ),
                  ),

                  const Divider(height: 32),

                  // Ride details
                  const Text(
                    'Chi ti·∫øt chuy·∫øn ƒëi',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 12),
                  _buildDetailRow(
                    'S·ªë gh·∫ø tr·ªëng:',
                    '${rideData.availableSeats}/${rideData.totalSeat} ng∆∞·ªùi',
                  ),
                  const SizedBox(height: 8),
                  _buildDetailRow(
                    'Gi√° m·ªói gh·∫ø:',
                    rideData.pricePerSeat != null
                        ? currencyFormat.format(rideData.pricePerSeat)
                        : 'Mi·ªÖn ph√≠',
                  ),

                  // Action Buttons Section
                  Container(
                    padding: const EdgeInsets.all(16),
                    child: _isLoading
                        ? const Center(child: CircularProgressIndicator())
                        : _isBooked
                            ? _buildBookingStatusContainer(_booking!)
                            : rideData.status.toUpperCase() == 'ACTIVE'
                                ? Column(
                                    crossAxisAlignment: CrossAxisAlignment.stretch,
                                    children: [
                                      const Text(
                                        'S·ªë gh·∫ø',
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          fontSize: 18,
                                        ),
                                      ),
                                      const SizedBox(height: 8),
                                      _availableSeats > 0
                                          ? Row(
                                              mainAxisAlignment:
                                                  MainAxisAlignment.spaceBetween,
                                              children: [
                                                Expanded(
                                                  child: Row(
                                                    children: [
                                                      IconButton(
                                                        icon: const Icon(Icons.remove),
                                                        onPressed: _selectedSeats > 1
                                                            ? () {
                                                                setState(() {
                                                                  _selectedSeats--;
                                                                });
                                                              }
                                                            : null,
                                                      ),
                                                      Text(
                                                        '$_selectedSeats',
                                                        style:
                                                            const TextStyle(fontSize: 18),
                                                      ),
                                                      IconButton(
                                                        icon: const Icon(Icons.add),
                                                        onPressed: _selectedSeats <
                                                                _availableSeats
                                                            ? () {
                                                                setState(() {
                                                                  _selectedSeats++;
                                                                });
                                                              }
                                                            : null,
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                                Text(
                                                  'C√≤n ${_availableSeats} gh·∫ø',
                                                  style: TextStyle(
                                                    color: _availableSeats <= 2
                                                        ? Colors.red
                                                        : Colors.green,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                              ],
                                            )
                                          : const Text(
                                              'ƒê√£ h·∫øt gh·∫ø',
                                              style: TextStyle(
                                                color: Colors.red,
                                                fontWeight: FontWeight.bold,
                                                fontSize: 16,
                                              ),
                                            ),
                                      const SizedBox(height: 16),
                                      Text(
                                        'T·ªïng ti·ªÅn: ${currencyFormat.format(_selectedSeats * (rideData.pricePerSeat ?? 0))}',
                                        style: const TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold,
                                          color: Colors.deepOrange,
                                        ),
                                      ),
                                      const SizedBox(height: 24),
                                      ElevatedButton(
                                        style: ElevatedButton.styleFrom(
                                          backgroundColor: const Color(0xFF00AEEF),
                                          padding: const EdgeInsets.symmetric(
                                            vertical: 16,
                                          ),
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(8),
                                          ),
                                        ),
                                        onPressed: _isBooking ? null : _bookRide,
                                        child: _isBooking
                                            ? const SizedBox(
                                                height: 20,
                                                width: 20,
                                                child: CircularProgressIndicator(
                                                  color: Colors.white,
                                                  strokeWidth: 2,
                                                ),
                                              )
                                            : const Text(
                                                'ƒê·∫∑t ch·ªó',
                                                style: TextStyle(
                                                  fontSize: 16,
                                                  fontWeight: FontWeight.bold,
                                                ),
                                              ),
                                      ),
                                    ],
                                  )
                                : Container(
                                    padding: const EdgeInsets.all(16),
                                    decoration: BoxDecoration(
                                      color: Colors.orange.shade50,
                                      borderRadius: BorderRadius.circular(12),
                                      border: Border.all(color: Colors.orange.shade300),
                                    ),
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Row(
                                          children: [
                                            Icon(
                                              Icons.info_outline,
                                              color: Colors.orange.shade800,
                                              size: 24,
                                            ),
                                            const SizedBox(width: 8),
                                            Expanded(
                                              child: Text(
                                                'Chuy·∫øn ƒëi kh√¥ng kh·∫£ d·ª•ng',
                                                style: TextStyle(
                                                  color: Colors.orange.shade800,
                                                  fontSize: 18,
                                                  fontWeight: FontWeight.bold,
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                        const SizedBox(height: 8),
                                        Text(
                                          'Chuy·∫øn ƒëi n√†y hi·ªán kh√¥ng cho ph√©p ƒë·∫∑t ch·ªó. Tr·∫°ng th√°i hi·ªán t·∫°i: ${rideData.status}',
                                          style: TextStyle(
                                            color: Colors.grey.shade800,
                                            fontSize: 14,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(label, style: TextStyle(color: Colors.grey[600], fontSize: 16)),
        Text(
          value,
          style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
        ),
      ],
    );
  }

  Future<void> _bookRide() async {
    final Ride rideData = widget.ride as Ride;

    setState(() {
      _isBooking = true;
    });

    try {
      print('üõí B·∫Øt ƒë·∫ßu ƒë·∫∑t ch·ªó cho chuy·∫øn ƒëi #${rideData.id} v·ªõi ${_selectedSeats} gh·∫ø');
      final booking = await _bookingService.bookRide(
        rideData.id,
        _selectedSeats,
      );

      if (booking != null) {
        print('‚úÖ ƒê·∫∑t ch·ªó th√†nh c√¥ng cho chuy·∫øn ƒëi #${rideData.id}, booking ID: ${booking.id}');
        
        setState(() {
          _isBooking = false;
          _isBooked = true;
          _booking = booking;
        });

        // G·ª≠i th√¥ng b√°o cho t√†i x·∫ø v·ªÅ y√™u c·∫ßu ƒë·∫∑t ch·ªó m·ªõi
        try {
          // Tr√≠ch xu·∫•t th√¥ng tin t√†i x·∫ø t·ª´ ride n·∫øu c√≥
          final String driverEmail = rideData.driverEmail ?? '';
          
          if (driverEmail.isNotEmpty) {
            await _notificationService.sendBookingRequestNotification(
              booking.id,
              booking.rideId,
              booking.passengerName,
              driverEmail
            );
            
            // T·ª± ƒë·ªông t·∫°o ph√≤ng chat v√† g·ª≠i tin nh·∫Øn ch√†o m·ª´ng
            await _createChatRoomWithDriver(driverEmail);
          } else {
            print('‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o: Thi·∫øu email t√†i x·∫ø');
          }
        } catch (e) {
          print('‚ùå L·ªói khi g·ª≠i th√¥ng b√°o ƒë·∫∑t ch·ªó: $e');
          // Kh√¥ng d·ª´ng quy tr√¨nh v√¨ ƒë√¢y kh√¥ng ph·∫£i l·ªói ch√≠nh
        }

        // Set up real-time listener for this booking
        _setupBookingStatusListener(booking.id);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('ƒê·∫∑t ch·ªó th√†nh c√¥ng!'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
        
        // ƒê·ª£i 1 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
        await Future.delayed(const Duration(seconds: 1));
        
        // Quay v·ªÅ m√†n h√¨nh tr∆∞·ªõc ƒë√≥ v·ªõi k·∫øt qu·∫£ true ƒë·ªÉ l√†m m·ªõi danh s√°ch
        if (mounted) {
          Navigator.pop(context, true);
        }
      } else {
        setState(() {
          _isBooking = false;
        });
        print('‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒë·ªëi t∆∞·ª£ng booking t·ª´ API');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('ƒê·∫∑t ch·ªó kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i sau.'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      setState(() {
        _isBooking = false;
      });
      print('‚ùå L·ªói khi ƒë·∫∑t ch·ªó: $e');
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('L·ªói: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // Widget hi·ªÉn th·ªã tr·∫°ng th√°i booking
  Widget _buildBookingStatusContainer(Booking booking) {
    Color statusColor;
    String statusText;
    IconData statusIcon;
    final Ride rideData = widget.ride as Ride;
    // Check if the ride is ready for departure
    final bool isReadyForDeparture = _rideService.canConfirmRide(rideData);
    // Check if the ride is in progress and ready for completion
    final bool isInProgress = rideData.status.toUpperCase() == 'IN_PROGRESS';
    // Check if the driver has confirmed the ride is complete
    final bool isDriverConfirmed = rideData.status.toUpperCase() == 'DRIVER_CONFIRMED';
    // Ride needs completion if it's in the IN_PROGRESS status
    final bool needsCompletion = isInProgress;
    // Passenger needs to confirm completion if driver has confirmed
    final bool needsPassengerConfirmation = isDriverConfirmed;
    
    switch (booking.status.toUpperCase()) {
      case 'PENDING':
        statusColor = Colors.orange;
        statusText = 'ƒêang ch·ªù t√†i x·∫ø x√°c nh·∫≠n';
        statusIcon = Icons.hourglass_empty;
        break;
      case 'APPROVED':
      case 'ACCEPTED':
        if (rideData.status.toUpperCase() == 'DRIVER_CONFIRMED') {
          statusColor = Colors.teal;
          statusText = 'T√†i x·∫ø ƒë√£ x√°c nh·∫≠n ho√†n th√†nh';
          statusIcon = Icons.verified;
        } else {
          statusColor = Colors.green;
          statusText = 'ƒê√£ ƒë∆∞·ª£c t√†i x·∫ø x√°c nh·∫≠n';
          statusIcon = Icons.check_circle;
        }
        break;
      case 'COMPLETED':
        statusColor = Colors.blue;
        statusText = 'Chuy·∫øn ƒëi ƒë√£ ho√†n th√†nh';
        statusIcon = Icons.star;
        break;
      case 'CANCELLED':
      case 'REJECTED':
        statusColor = Colors.red;
        statusText = 'ƒê√£ b·ªã h·ªßy/t·ª´ ch·ªëi';
        statusIcon = Icons.cancel;
        break;
      default:
        statusColor = Colors.grey;
        statusText = 'Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh';
        statusIcon = Icons.help;
    }
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: statusColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: statusColor),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(statusIcon, color: statusColor, size: 24),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  statusText,
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                    color: statusColor,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          _buildBookingDetailItem('M√£ ƒë·∫∑t ch·ªó:', '#${booking.id}'),
          _buildBookingDetailItem('S·ªë gh·∫ø ƒë√£ ƒë·∫∑t:', '${booking.seatsBooked}'),
          _buildBookingDetailItem(
            'T·ªïng ti·ªÅn:',
            booking.pricePerSeat != null
                ? NumberFormat.currency(locale: 'vi_VN', symbol: '‚Ç´')
                    .format(booking.pricePerSeat! * booking.seatsBooked)
                : 'Kh√¥ng c√≥ th√¥ng tin',
          ),
          _buildBookingDetailItem(
            'Th·ªùi gian ƒë·∫∑t:',
            _formatTime(booking.createdAt),
          ),
          
          // Th√™m n√∫t chat v·ªõi t√†i x·∫ø
          const SizedBox(height: 16),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              ElevatedButton.icon(
                onPressed: () async {
                  final Ride rideData = widget.ride as Ride;
                  final String driverEmail = rideData.driverEmail ?? '';
                  
                  if (driverEmail.isNotEmpty) {
                    // M·ªü m√†n h√¨nh chat v·ªõi t√†i x·∫ø
                    final roomId = await _chatService.createOrGetChatRoom(driverEmail);
                    if (roomId != null && context.mounted) {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => ChatRoomScreen(
                            roomId: roomId,
                            partnerName: rideData.driverName,
                            partnerEmail: driverEmail,
                          ),
                        ),
                      );
                    } else {
                      if (context.mounted) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('Kh√¥ng th·ªÉ t·∫°o ph√≤ng chat, vui l√≤ng th·ª≠ l·∫°i sau'),
                          ),
                        );
                      }
                    }
                  }
                },
                icon: const Icon(Icons.chat_bubble_outline),
                label: const Text('Nh·∫Øn tin'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                ),
              ),
              ElevatedButton.icon(
                onPressed: () {
                  // X·ª≠ l√Ω ch·ª©c nƒÉng g·ªçi ƒëi·ªán (s·∫Ω th√™m sau)
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn'),
                    ),
                  );
                },
                icon: const Icon(Icons.phone),
                label: const Text('G·ªçi'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
          
          // Departure confirmation for rides in progress
          if (isReadyForDeparture && (booking.status.toUpperCase() == 'APPROVED' || booking.status.toUpperCase() == 'ACCEPTED'))
            Padding(
              padding: const EdgeInsets.only(top: 16),
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.amber.shade50,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.amber.shade300),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(
                          Icons.access_time,
                          color: Colors.amber.shade800,
                          size: 24,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          'ƒê√£ ƒë·∫øn gi·ªù kh·ªüi h√†nh!',
                          style: TextStyle(
                            color: Colors.amber.shade800,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'H√£y x√°c nh·∫≠n khi b·∫°n ƒë√£ s·∫µn s√†ng tham gia chuy·∫øn ƒëi n√†y.',
                      style: TextStyle(
                        color: Colors.grey.shade800,
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 16),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: _isLoading ? null : () => _confirmPassengerDeparture(booking),
                        icon: _isLoading
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  color: Colors.white,
                                  strokeWidth: 2,
                                ),
                              )
                            : const Icon(Icons.directions_car),
                        label: Text(
                          _isLoading ? 'ƒêang x√°c nh·∫≠n...' : 'X√°c nh·∫≠n tham gia'
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.amber.shade700,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          
          // Ride completion confirmation for passenger when ride is in progress
          if (needsCompletion && (booking.status.toUpperCase() == 'APPROVED' || booking.status.toUpperCase() == 'ACCEPTED'))
            Padding(
              padding: const EdgeInsets.only(top: 16),
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.green.shade50,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.green.shade300),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(
                          Icons.flag,
                          color: Colors.green.shade800,
                          size: 24,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          'Chuy·∫øn ƒëi ƒëang di·ªÖn ra!',
                          style: TextStyle(
                            color: Colors.green.shade800,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'H√£y x√°c nh·∫≠n khi b·∫°n ƒë√£ ƒë·∫øn n∆°i v√† ho√†n th√†nh chuy·∫øn ƒëi n√†y.',
                      style: TextStyle(
                        color: Colors.grey.shade800,
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 16),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: _isLoading ? null : () => _confirmRideCompletion(booking),
                        icon: _isLoading
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  color: Colors.white,
                                  strokeWidth: 2,
                                ),
                              )
                            : const Icon(Icons.check_circle),
                        label: Text(
                          _isLoading ? 'ƒêang x√°c nh·∫≠n...' : 'X√°c nh·∫≠n ƒë√£ ƒë·∫øn n∆°i'
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.green.shade700,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          
          // Passenger confirmation of ride completion when driver has confirmed
          if (needsPassengerConfirmation && (booking.status.toUpperCase() == 'APPROVED' || booking.status.toUpperCase() == 'ACCEPTED'))
            Padding(
              padding: const EdgeInsets.only(top: 16),
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.teal.shade50,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.teal.shade300),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(
                          Icons.verified,
                          color: Colors.teal.shade700,
                          size: 24,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          'T√†i x·∫ø ƒë√£ x√°c nh·∫≠n ho√†n th√†nh!',
                          style: TextStyle(
                            color: Colors.teal.shade700,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'T√†i x·∫ø ƒë√£ x√°c nh·∫≠n chuy·∫øn ƒëi ƒë√£ ho√†n th√†nh. Vui l√≤ng ki·ªÉm tra v√† x√°c nh·∫≠n ƒë·ªÉ ho√†n t·∫•t chuy·∫øn ƒëi.',
                      style: TextStyle(
                        color: Colors.grey.shade800,
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 16),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: _isLoading ? null : () => _confirmRideCompletion(booking),
                        icon: _isLoading
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  color: Colors.white,
                                  strokeWidth: 2,
                                ),
                              )
                            : const Icon(Icons.check_circle),
                        label: Text(
                          _isLoading ? 'ƒêang x√°c nh·∫≠n...' : 'X√°c nh·∫≠n ho√†n th√†nh'
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.teal.shade700,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          
          // Hi·ªÉn th·ªã n√∫t h·ªßy ƒë·∫∑t ch·ªó n·∫øu ƒëang ·ªü tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
          if (booking.status.toUpperCase() == 'PENDING')
            Padding(
              padding: const EdgeInsets.only(top: 16),
              child: SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  onPressed: () => _cancelBooking(booking),
                  child: const Text(
                    'H·ªßy ƒë·∫∑t ch·ªó',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
  
  // H√†m h·ªßy ƒë·∫∑t ch·ªó
  Future<void> _cancelBooking(Booking booking) async {
    final bool confirm = await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('X√°c nh·∫≠n h·ªßy'),
        content: const Text(
          'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë·∫∑t ch·ªó kh√¥ng?'
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Kh√¥ng'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
            ),
            child: const Text('H·ªßy ƒë·∫∑t ch·ªó'),
          ),
        ],
      ),
    ) ?? false;

    if (!confirm) return;

    // Hi·ªÉn th·ªã loading indicator
    setState(() {
      _isLoading = true;
    });

    try {
      print('üö´ B·∫Øt ƒë·∫ßu h·ªßy ƒë·∫∑t ch·ªó cho booking #${booking.id}');
      
      // G·ªçi API ƒë·ªÉ h·ªßy booking s·ª≠ d·ª•ng endpoint m·ªõi
      final success = await _bookingService.cancelBooking(booking.rideId);
      
      if (success) {
        print('‚úÖ H·ªßy ƒë·∫∑t ch·ªó th√†nh c√¥ng');
        
        // X√≥a th√¥ng tin booking kh·ªèi Firebase ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≤n d·ªØ li·ªáu c≈©
        try {
          final DatabaseReference bookingRef = FirebaseDatabase.instance.ref('bookings/${booking.id}');
          await bookingRef.remove();
          print('‚úÖ ƒê√£ x√≥a booking #${booking.id} kh·ªèi Firebase');
          
          // ƒê·∫£m b·∫£o h·ªßy subscription hi·ªán t·∫°i
          _bookingStatusSubscription?.cancel();
          _bookingStatusSubscription = null;
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi x√≥a booking kh·ªèi Firebase: $e');
          // Kh√¥ng d·ª´ng quy tr√¨nh v√¨ ƒë√¢y kh√¥ng ph·∫£i l·ªói ch√≠nh
        }
        
        if (mounted) {
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking locally ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i "ƒê√£ h·ªßy"
          setState(() {
            _booking = null;  // X√≥a booking ho√†n to√†n thay v√¨ ch·ªâ c·∫≠p nh·∫≠t tr·∫°ng th√°i
            _isBooked = false;  // ƒê·∫∑t l·∫°i tr·∫°ng th√°i l√† ch∆∞a ƒë·∫∑t
            _isLoading = false;
          });
          
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('ƒê√£ h·ªßy ƒë·∫∑t ch·ªó th√†nh c√¥ng'),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 2),
            ),
          );
          
          // ƒê·ª£i 2 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i ƒë√£ h·ªßy tr∆∞·ªõc khi quay l·∫°i m√†n h√¨nh tr∆∞·ªõc
          await Future.delayed(const Duration(seconds: 2));
          
          // Force x√≥a cache ƒë·ªÉ load l·∫°i danh s√°ch chuy·∫øn ƒëi c√≥ s·∫µn
          final rideService = RideService();
          rideService.clearAvailableRidesCache();
          
          // ƒê·∫∑t k·∫øt qu·∫£ v√† quay v·ªÅ m√†n h√¨nh tr∆∞·ªõc ƒë√≥
          // Gi√° tr·ªã true s·∫Ω trigger vi·ªác refresh danh s√°ch chuy·∫øn ƒëi tr√™n m√†n h√¨nh tr∆∞·ªõc
          if (mounted) {
            Navigator.pop(context, true);
          }
        }
      } else {
        print('‚ùå Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t ch·ªó qua API');
        
        setState(() {
          _isLoading = false;
        });
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t ch·ªó. Vui l√≤ng th·ª≠ l·∫°i sau.'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi h·ªßy ƒë·∫∑t ch·ªó: $e');
      
      setState(() {
        _isLoading = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('L·ªói: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  Widget _buildBookingDetailItem(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              label,
              style: const TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 14,
                color: Colors.black87,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontSize: 14),
            ),
          ),
        ],
      ),
    );
  }

  // H√†nh kh√°ch x√°c nh·∫≠n tham gia chuy·∫øn ƒëi
  Future<void> _confirmPassengerDeparture(Booking booking) async {
    bool confirm = await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('X√°c nh·∫≠n tham gia'),
        content: const Text('B·∫°n x√°c nh·∫≠n ƒë√£ s·∫µn s√†ng tham gia chuy·∫øn ƒëi n√†y?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Kh√¥ng'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.amber.shade700,
            ),
            child: const Text('X√°c nh·∫≠n'),
          ),
        ],
      ),
    ) ?? false;

    if (!confirm) return;

    setState(() {
      _isLoading = true;
    });

    try {
      // L·∫•y th√¥ng tin v·ªÅ ride ID 
      final rideId = booking.rideId;
      
      // X√°c nh·∫≠n tham gia chuy·∫øn ƒëi
      final success = await _rideService.passengerConfirmDeparture(rideId);
      
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        
        if (success) {
          // Reload booking data
          _refreshBookingStatus();
          
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('ƒê√£ x√°c nh·∫≠n tham gia chuy·∫øn ƒëi'),
              backgroundColor: Colors.green,
            ),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Kh√¥ng th·ªÉ x√°c nh·∫≠n tham gia chuy·∫øn ƒëi'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('L·ªói: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // H√†nh kh√°ch x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi
  Future<void> _confirmRideCompletion(Booking booking) async {
    final Ride rideData = widget.ride as Ride;
    final String rideStatus = rideData.status.toUpperCase();
    final bool isDriverConfirmed = rideStatus == 'DRIVER_CONFIRMED';
    
    // Hi·ªÉn th·ªã th√¥ng b√°o kh√°c nhau d·ª±a tr√™n tr·∫°ng th√°i chuy·∫øn ƒëi
    String dialogTitle = isDriverConfirmed 
        ? 'X√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi' 
        : 'X√°c nh·∫≠n ƒë√£ ƒë·∫øn n∆°i';
        
    String dialogContent = isDriverConfirmed
        ? 'T√†i x·∫ø ƒë√£ x√°c nh·∫≠n chuy·∫øn ƒëi ho√†n th√†nh. B·∫°n ƒë·ªìng √Ω x√°c nh·∫≠n ho√†n th√†nh?'
        : 'B·∫°n x√°c nh·∫≠n ƒë√£ ho√†n th√†nh chuy·∫øn ƒëi n√†y?';
    
    bool confirm = await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(dialogTitle),
        content: Text(dialogContent),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Kh√¥ng'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(
              backgroundColor: isDriverConfirmed ? Colors.teal : Colors.green,
            ),
            child: const Text('X√°c nh·∫≠n'),
          ),
        ],
      ),
    ) ?? false;

    if (!confirm) return;

    setState(() {
      _isLoading = true;
    });

    try {
      // L·∫•y th√¥ng tin v·ªÅ ride ID 
      final rideId = booking.rideId;
      
      // X√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi - s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ph√π h·ª£p d·ª±a tr√™n tr·∫°ng th√°i
      final success = await _rideService.passengerConfirmCompletion(rideId);
      
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        
        if (success) {
          // Reload booking data
          _refreshBookingStatus();
          
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(isDriverConfirmed 
                  ? 'ƒê√£ x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi' 
                  : 'ƒê√£ x√°c nh·∫≠n ƒë√£ ƒë·∫øn n∆°i'),
              backgroundColor: Colors.green,
            ),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(isDriverConfirmed 
                  ? 'Kh√¥ng th·ªÉ x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi' 
                  : 'Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë√£ ƒë·∫øn n∆°i'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('L·ªói: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // H√†m ƒë·ªÉ t·∫£i l·∫°i th√¥ng tin booking khi c√≥ thay ƒë·ªïi
  Future<void> _refreshBookingStatus() async {
    if (!mounted) return;
    
    setState(() {
      _isLoading = true;
    });
    
    try {
      // N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒë·∫∑t ch·ªó cho chuy·∫øn ƒëi n√†y
      if (_isBooked && _booking != null) {
        // L·∫•y booking m·ªõi nh·∫•t
        final latestBooking = await _bookingService.getBookingDetail(_booking!.id);
        
        if (latestBooking != null) {
          setState(() {
            _booking = latestBooking;
            _isLoading = false;
          });
        } else {
          // C√≥ th·ªÉ booking ƒë√£ b·ªã x√≥a
          setState(() {
            _isBooked = false;
            _booking = null;
            _isLoading = false;
          });
        }
      } else {
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ booking n√†o cho chuy·∫øn ƒëi n√†y ch∆∞a
        final Ride rideData = widget.ride as Ride;
        final bookings = await _bookingService.getPassengerBookings();
        final currentBooking = bookings.where((b) => b.rideId == rideData.id).firstOrNull;
        
        if (currentBooking != null) {
          setState(() {
            _isBooked = true;
            _booking = currentBooking;
            _isLoading = false;
          });
          
          // Set up real-time listener for this booking
          _setupBookingStatusListener(currentBooking.id);
        } else {
          setState(() {
            _isLoading = false;
          });
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi t·∫£i th√¥ng tin booking: $e');
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ t·ª± ƒë·ªông t·∫°o ph√≤ng chat v·ªõi t√†i x·∫ø sau khi ƒë·∫∑t ch·ªó th√†nh c√¥ng
  Future<void> _createChatRoomWithDriver(String driverEmail) async {
    try {
      if (driverEmail.isEmpty) {
        print('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o ph√≤ng chat: Email t√†i x·∫ø tr·ªëng');
        return;
      }
      
      print('üîÑ ƒêang t·∫°o ph√≤ng chat v·ªõi t√†i x·∫ø: $driverEmail');
      
      // T·∫°o ho·∫∑c l·∫•y ph√≤ng chat v·ªõi t√†i x·∫ø
      final roomId = await _chatService.createOrGetChatRoom(driverEmail);
      
      if (roomId != null && roomId.isNotEmpty) {
        print('‚úÖ ƒê√£ t·∫°o/l·∫•y ph√≤ng chat th√†nh c√¥ng: $roomId');
        
        // ƒê·∫£m b·∫£o ph√≤ng chat ƒë∆∞·ª£c hi·ªÉn th·ªã cho c·∫£ hai b√™n
        await _chatService.ensureChatRoomIsCreated(driverEmail);
        
        // G·ª≠i tin nh·∫Øn t·ª± ƒë·ªông th√¥ng b√°o v·ªÅ booking
        if (_booking != null) {
          final bookingInfo = 'Xin ch√†o! T√¥i ƒë√£ ƒë·∫∑t ${_booking!.seatsBooked} gh·∫ø cho chuy·∫øn ƒëi c·ªßa b·∫°n!';
          final messageSent = await _chatService.sendMessage(roomId, driverEmail, bookingInfo);
          
          if (messageSent) {
            print('‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ch√†o m·ª´ng th√¥ng qua ph√≤ng chat: $roomId');
          } else {
            print('‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ch√†o m·ª´ng');
          }
        }
      } else {
        print('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o/l·∫•y ph√≤ng chat');
      }
    } catch (e) {
      print('‚ùå L·ªói khi t·∫°o ph√≤ng chat v·ªõi t√†i x·∫ø: $e');
    }
  }
}
